package org.example.services

import kotlinx.serialization.encodeToString
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.json.Json
import org.example.models.*
import java.io.File
import java.time.LocalDate

object AdService {
    private const val ADS_FILE = "ads.json"
    private val ads = mutableListOf<Ad>()

    init {
        loadAds()
    }

    private fun loadAds() {
        val file = File(ADS_FILE)
        if (file.exists()) {
            val content = file.readText()
            if (content.isNotEmpty()) {
                ads.addAll(Json.decodeFromString(content))
            }
        }
    }

    private fun saveAds() {
        File(ADS_FILE).writeText(Json.encodeToString(ads))
    }

    fun addAd() {
        println("–í–≤–µ–¥–∏—Ç–µ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞:")
        val ownerId = readlnOrNull()?.trim().orEmpty()
        if (ownerId.isEmpty()) {
            println("–û—à–∏–±–∫–∞: ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        }
        println("–í–≤–µ–¥–∏—Ç–µ VIN –¢–°:")
        val vehicleId = readlnOrNull()?.trim().orEmpty()
        if (vehicleId.isEmpty()) {
            println("–û—à–∏–±–∫–∞: VIN –¢–° –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        }
        println("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:")
        val price = readlnOrNull()?.toDoubleOrNull()
        if (price == null || price <= 0) {
            println("–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return
        }

        val newAd = Ad(
            ownerId = ownerId,
            vehicleId = vehicleId,
            price = price,
            date = LocalDate.now().toString()
        )
        newAd.priceHistory.add(price)
        ads.add(newAd)
        saveAds()
        println("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    fun removeAd() {
        if (ads.isEmpty()) {
            println("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        }

        println("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        ads.forEachIndexed { index, ad ->
            println("${index + 1}. VIN: ${ad.vehicleId}, —Ü–µ–Ω–∞: ${ad.price}, –¥–∞—Ç–∞: ${ad.date}")
        }

        val choice = readlnOrNull()?.toIntOrNull()
        if (choice == null || choice !in 1..ads.size) {
            println("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
            return
        }

        println("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–Ω—è—Ç–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        println("1. –ü—Ä–æ–¥–∞–Ω–æ")
        println("2. –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞")
        val reason = when (readlnOrNull()?.toIntOrNull()) {
            1 -> "–ü—Ä–æ–¥–∞–Ω–æ"
            2 -> "–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞"
            else -> {
                println("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
                return
            }
        }

        val removedAd = ads.removeAt(choice - 1)
        saveAds()

        println("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø—Ä–æ–¥–∞–∂–∏ (–ü—Ä–∏—á–∏–Ω–∞: $reason)")
    }

    // –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ä–∞–∑–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    private fun searchByPriceAndMileage() {
        println("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        val minPrice = readlnOrNull()?.toDoubleOrNull()

        println("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        val maxPrice = readlnOrNull()?.toDoubleOrNull()

        println("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        val minMileage = readlnOrNull()?.toIntOrNull()

        println("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        val maxMileage = readlnOrNull()?.toIntOrNull()

        val filteredAds = ads.filter { ad ->
            val vehicle = VehicleService.getVehicleById(ad.vehicleId)
            vehicle != null &&
                    (minPrice == null || ad.price >= minPrice) &&
                    (maxPrice == null || ad.price <= maxPrice) &&
                    (minMileage == null || vehicle.mileage >= minMileage) &&
                    (maxMileage == null || vehicle.mileage <= maxMileage)
        }

        printSearchResults(filteredAds)
    }

    private fun searchByColor() {
        println("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –¢–°:")
        val color = readlnOrNull()?.trim()?.lowercase() ?: return

        val filteredAds = ads.filter { ad ->
            val vehicle = VehicleService.getVehicleById(ad.vehicleId)
            vehicle != null && vehicle.color.lowercase() == color
        }

        printSearchResults(filteredAds)
    }

    private fun searchByType() {
        println("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¢–°:")
        println("1. –ê–≤—Ç–æ")
        println("2. –ú–æ—Ç–æ")
        println("3. –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π")
        val typeChoice = readlnOrNull()?.toIntOrNull()

        val filteredAds = ads.filter { ad ->
            val vehicle = VehicleService.getVehicleById(ad.vehicleId)
            when (typeChoice) {
                1 -> vehicle is Car
                2 -> vehicle is Motorcycle
                3 -> vehicle is Commercial
                else -> false
            }
        }

        printSearchResults(filteredAds)
    }

    private fun showAllAds() {
        printSearchResults(ads)
    }

    private fun searchByVIN() {
        println("–í–≤–µ–¥–∏—Ç–µ VIN –¢–°:")
        val vin = readlnOrNull()?.trim()?.uppercase() ?: return

        val filteredAds = ads.filter { it.vehicleId.uppercase() == vin }
        printSearchResults(filteredAds)
    }

    private fun printSearchResults(results: List<Ad>) {
        if (results.isEmpty()) {
            println("üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        } else {
            println("üîç –ù–∞–π–¥–µ–Ω–æ ${results.size} –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
            results.forEach { ad ->
                val vehicle = VehicleService.getVehicleById(ad.vehicleId)
                if (vehicle != null) {
                    println("üìå ${vehicle.brand} ${vehicle.model}, ${vehicle.year}–≥., –¶–≤–µ—Ç: ${vehicle.color}, –ü—Ä–æ–±–µ–≥: ${vehicle.mileage} –∫–º, –¶–µ–Ω–∞: ${ad.price} —Ä—É–±.")
                }
            }
        }
    }

    fun showAds() {
        if (ads.isEmpty()) {
            println("üîç –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return
        }

        while (true) {
            println("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ:")
            println("1. –ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ –∏ –ø—Ä–æ–±–µ–≥—É")
            println("2. –ü–æ–∏—Å–∫ –ø–æ —Ü–≤–µ—Ç—É")
            println("3. –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É –¢–°")
            println("4. –û–±—â–∏–π –ø–æ–∏—Å–∫ (–≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)")
            println("5. –ü–æ–∏—Å–∫ –ø–æ VIN")
            println("6. –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")

            when (readlnOrNull()?.trim()) {
                "1" -> searchByPriceAndMileage()
                "2" -> searchByColor()
                "3" -> searchByType()
                "4" -> showAllAds()
                "5" -> searchByVIN()
                "6" -> return
                else -> println("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!")
            }
        }
    }

}