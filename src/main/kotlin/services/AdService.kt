package org.example.services

import org.example.models.Ad
import org.example.models.Car
import org.example.models.Commercial
import org.example.models.Motorcycle
import org.example.storage.DataStorage
import java.time.LocalDate

object AdService {
    private val ads: MutableList<Ad> get() = DataStorage.data.ads

    fun addAd() {
        val availableVehicles = VehicleService.getAllVehicles()
            .filter { vehicle -> ads.none { it.vehicleId == vehicle.vin } }

        if (availableVehicles.isEmpty()) {
            println("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¢–° –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
            return
        }

        println("–í—ã–±–µ—Ä–∏—Ç–µ –¢–° –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        availableVehicles.forEachIndexed { index, vehicle ->
            println("${index + 1}. ${vehicle.brand} ${vehicle.model} (${vehicle.year}) - VIN: ${vehicle.vin}")
        }

        val vehicleChoice = readlnOrNull()?.toIntOrNull()
        if (vehicleChoice == null || vehicleChoice !in 1..availableVehicles.size) {
            println("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –¢–°.")
            return addAd()
        }

        val selectedVehicle = availableVehicles[vehicleChoice - 1]

        val owners = OwnerService.loadOwners()
        if (owners.isEmpty()) {
            println("–û—à–∏–±–∫–∞: –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
            return
        }

        println("–í—ã–±–µ—Ä–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        owners.forEachIndexed { index, owner ->
            println("${index + 1}. –ò–º—è: ${owner.name}, —Ç–µ–ª–µ—Ñ–æ–Ω ${owner.phone}, email ${owner.email}")
        }

        val ownerChoice = readlnOrNull()?.toIntOrNull()
        if (ownerChoice == null || ownerChoice !in 1..owners.size) {
            println("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
            return addAd()
        }

        val selectedOwner = owners[ownerChoice - 1]

        println("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:")
        val price = readlnOrNull()?.toDoubleOrNull()
        if (price == null || price <= 0) {
            println("–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return addAd()
        }

        val newAd = Ad(
            ownerId = selectedOwner.id,
            vehicleId = selectedVehicle.vin,
            price = price,
            date = LocalDate.now().toString()
        )
        newAd.priceHistory.add(price)
        ads.add(newAd)
        DataStorage.saveData()
        println("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    fun removeAd() {
        val activeAds = ads.filter { it.status == "active" }
        if (activeAds.isEmpty()) {
            println("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–Ω—è—Ç–∏—è.")
            return
        }

        println("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        activeAds.forEachIndexed { index, ad ->
            val vehicle = VehicleService.getVehicleById(ad.vehicleId)
            println("${index + 1}. ${vehicle?.brand} ${vehicle?.model} - VIN: ${ad.vehicleId}, –¶–µ–Ω–∞: ${ad.price}")
        }

        val choice = readlnOrNull()?.toIntOrNull()
        if (choice == null || choice !in 1..activeAds.size) {
            println("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
            return
        }

        val selectedAd = activeAds[choice - 1]

        println("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–Ω—è—Ç–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        println("1. –ü—Ä–æ–¥–∞–Ω–æ")
        println("2. –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞")
        val reason = when (readlnOrNull()?.toIntOrNull()) {
            1 -> "–ü—Ä–æ–¥–∞–Ω–æ"
            2 -> "–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞"
            else -> {
                println("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
                return
            }
        }

        selectedAd.status = if (reason == "–ü—Ä–æ–¥–∞–Ω–æ") "sold" else "removed"
        selectedAd.removalReason = reason
        DataStorage.saveData()
        println("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø—Ä–æ–¥–∞–∂–∏ (–ü—Ä–∏—á–∏–Ω–∞: $reason)")
    }

    // –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ä–∞–∑–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    private fun searchByPriceAndMileage() {
        println("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        val minPrice = readlnOrNull()?.toDoubleOrNull()

        println("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        val maxPrice = readlnOrNull()?.toDoubleOrNull()

        println("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        val minMileage = readlnOrNull()?.toIntOrNull()

        println("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        val maxMileage = readlnOrNull()?.toIntOrNull()

        val filteredAds = ads.filter { ad ->
            ad.status == "active" &&
                    VehicleService.getVehicleById(ad.vehicleId)?.let { vehicle ->
                        (minPrice == null || ad.price >= minPrice) &&
                                (maxPrice == null || ad.price <= maxPrice) &&
                                (minMileage == null || vehicle.mileage >= minMileage) &&
                                (maxMileage == null || vehicle.mileage <= maxMileage)
                    } ?: false
        }
        printSearchResults(filteredAds)
    }

    private fun searchByColor() {
        println("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –¢–°:")
        val color = readlnOrNull()?.trim()?.lowercase() ?: return

        val filteredAds = ads.filter { ad ->
            ad.status == "active" &&
                    VehicleService.getVehicleById(ad.vehicleId)?.color?.lowercase() == color
        }
        printSearchResults(filteredAds)
    }

    private fun searchByType() {
        println("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¢–°:")
        println("1. –ê–≤—Ç–æ")
        println("2. –ú–æ—Ç–æ")
        println("3. –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π")
        val typeChoice = readlnOrNull()?.toIntOrNull()

        when (typeChoice) {
            1 -> {
                println("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∫—É–∑–æ–≤–∞ (—Å–µ–¥–∞–Ω, —Ö—ç—Ç—á–±—ç–∫, —É–Ω–∏–≤–µ—Ä—Å–∞–ª, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—Å–µ—Ö):")
                val bodyType = readlnOrNull()?.trim()?.lowercase()
                val filteredAds = ads.filter { ad ->
                    ad.status == "active" &&
                            VehicleService.getVehicleById(ad.vehicleId)?.let { vehicle ->
                                vehicle is Car && (bodyType.isNullOrEmpty() || vehicle.bodyType.lowercase() == bodyType)
                            } ?: false
                }
                printSearchResults(filteredAds)
            }

            2 -> {
                println("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –º–æ—Ç–æ—Ü–∏–∫–ª–∞ (–∫—Ä–æ—Å—Å–æ–≤—ã–π, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π, –≥—Ä–∞–Ω—Ç—É—Ä–∏–∑–º–æ, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—Å–µ—Ö):")
                val motoType = readlnOrNull()?.trim()?.lowercase()
                val filteredAds = ads.filter { ad ->
                    ad.status == "active" &&
                            VehicleService.getVehicleById(ad.vehicleId)?.let { vehicle ->
                                vehicle is Motorcycle && (motoType.isNullOrEmpty() || vehicle.motoType.lowercase() == motoType)
                            } ?: false
                }
                printSearchResults(filteredAds)
            }

            3 -> {
                println("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≥—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω–æ—Å—Ç—å (–≤ –∫–≥, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—Å–µ—Ö):")
                val minCapacity = readlnOrNull()?.toIntOrNull()
                val filteredAds = ads.filter { ad ->
                    ad.status == "active" &&
                            VehicleService.getVehicleById(ad.vehicleId)?.let { vehicle ->
                                vehicle is Commercial && (minCapacity == null || vehicle.capacity >= minCapacity)
                            } ?: false
                }
                printSearchResults(filteredAds)
            }

            else -> {
                println("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
            }
        }
    }

    private fun showAllAds() {
        printSearchResults(ads)
    }

    private fun searchAll() {
        val filteredAds = ads.filter { it.status == "active" }
        printSearchResults(filteredAds)
    }

    private fun searchByVIN() {
        println("–í–≤–µ–¥–∏—Ç–µ VIN –¢–°:")
        val vin = readlnOrNull()?.trim()?.uppercase() ?: return

        val filteredAds = ads.filter { ad ->
            ad.status == "active" && ad.vehicleId.uppercase() == vin
        }
        printSearchResults(filteredAds)
    }

    private fun printSearchResults(results: List<Ad>) {
        if (results.isEmpty()) {
            println("üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        } else {
            println("üîç –ù–∞–π–¥–µ–Ω–æ ${results.size} –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
            results.forEach { ad ->
                val vehicle = VehicleService.getVehicleById(ad.vehicleId)
                if (vehicle != null) {
                    val extraInfo = when (vehicle) {
                        is Car -> "–¢–∏–ø –∫—É–∑–æ–≤–∞: ${vehicle.bodyType}"
                        is Motorcycle -> "–¢–∏–ø –º–æ—Ç–æ—Ü–∏–∫–ª–∞: ${vehicle.motoType}"
                        is Commercial -> "–ì—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω–æ—Å—Ç—å: ${vehicle.capacity} –∫–≥"
                    }
                    println("üìå ${vehicle.brand} ${vehicle.model}, ${vehicle.year}–≥., –¶–≤–µ—Ç: ${vehicle.color}, –ü—Ä–æ–±–µ–≥: ${vehicle.mileage} –∫–º, –¶–µ–Ω–∞: ${ad.price} —Ä—É–±., $extraInfo")
                }
            }
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞
    fun showAds() {
        val activeAds = ads.filter { it.status == "active" }
        if (activeAds.isEmpty()) {
            println("üîç –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return
        }

        while (true) {
            println("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ:")
            println("1. –ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ –∏ –ø—Ä–æ–±–µ–≥—É")
            println("2. –ü–æ–∏—Å–∫ –ø–æ —Ü–≤–µ—Ç—É")
            println("3. –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É –¢–°")
            println("4. –û–±—â–∏–π –ø–æ–∏—Å–∫ (–≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)")
            println("5. –û–±—â–∏–π –ø–æ–∏—Å–∫ (–≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è)")
            println("6. –ü–æ–∏—Å–∫ –ø–æ VIN")
            println("7. –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")

            when (readlnOrNull()?.trim()) {
                "1" -> searchByPriceAndMileage()
                "2" -> searchByColor()
                "3" -> searchByType()
                "4" -> searchAll()
                "5" -> showAllAds()
                "6" -> searchByVIN()
                "7" -> return
                else -> println("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!")
            }
        }
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
    fun changeAdPrice() {
        println("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:")

        val activeAds = ads.filter { it.status == "active" }
        if (activeAds.isEmpty()) {
            println("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
            return
        }

        activeAds.forEachIndexed { index, ad ->
            val vehicle = VehicleService.getVehicleById(ad.vehicleId)
            if (vehicle == null) {
                println("–û—à–∏–±–∫–∞: –¢–° —Å VIN ${ad.vehicleId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                return
            }
            println("${index + 1}. ${vehicle.brand} ${vehicle.model} - –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${ad.price} - VIN: ${ad.vehicleId}")
        }

        val choice = readlnOrNull()?.toIntOrNull()
        if (choice == null || choice !in 1..activeAds.size) {
            println("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return changeAdPrice()
        }

        val ad = activeAds[choice - 1]

        println("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
        val newPrice = readlnOrNull()?.toDoubleOrNull()
        if (newPrice == null || newPrice <= 0) {
            println("–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return changeAdPrice()
        }

        println("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${ad.price}. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ $newPrice? (–¥–∞/–Ω–µ—Ç)")
        val confirm = readlnOrNull()?.trim()?.lowercase()
        if (confirm != "–¥–∞") {
            println("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return
        }

        ad.priceHistory.add(ad.price)
        ad.price = newPrice
        DataStorage.saveData()
        println("‚úÖ –¶–µ–Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    }

    // –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã
    fun showPriceHistory() {
        val activeAds = ads.filter { it.status == "active" }
        if (activeAds.isEmpty()) {
            println("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω.")
            return
        }

        activeAds.forEachIndexed { index, ad ->
            val vehicle = VehicleService.getVehicleById(ad.vehicleId)
            if (vehicle != null) {
                println("${index + 1}. ${vehicle.brand} ${vehicle.model} - –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${ad.price} - VIN: ${ad.vehicleId}")
            } else {
                println("–û—à–∏–±–∫–∞: –¢–° —Å VIN ${ad.vehicleId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            }
        }

        val choice = readlnOrNull()?.toIntOrNull()
        if (choice == null || choice !in 1..activeAds.size) {
            println("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return showPriceHistory()
        }

        val ad = activeAds[choice - 1]

        println("üìä –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è VIN: ${ad.vehicleId}")
        if (ad.priceHistory.isEmpty()) {
            println("‚è≥ –¶–µ–Ω–∞ –Ω–µ –º–µ–Ω—è–ª–∞—Å—å —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${ad.price} —Ä—É–±.")
        } else {
            ad.priceHistory.forEachIndexed { index, price ->
                println("${index + 1}. $price —Ä—É–±.")
            }
        }
    }
}